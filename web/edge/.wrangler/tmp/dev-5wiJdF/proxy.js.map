{
  "version": 3,
  "sources": ["../../../src/proxy.ts", "../../../../../../../../../AppData/Roaming/nvm/v22.12.0/node_modules/wrangler/templates/middleware/middleware-ensure-req-body-drained.ts", "../../../../../../../../../AppData/Roaming/nvm/v22.12.0/node_modules/wrangler/templates/middleware/middleware-miniflare3-json-error.ts", "../bundle-EhBDtQ/middleware-insertion-facade.js", "../../../../../../../../../AppData/Roaming/nvm/v22.12.0/node_modules/wrangler/templates/middleware/common.ts", "../bundle-EhBDtQ/middleware-loader.entry.ts"],
  "sourceRoot": "C:\\Users\\rbatc\\Documents\\Projects\\Idea Project\\Idea-Manager\\web\\edge\\.wrangler\\tmp\\dev-5wiJdF",
  "sourcesContent": ["// A minimal, safe proxy for your FastAPI.\r\n// Mount this Worker on /api/* at app.eddyb.dev so cookies are first-party.\r\n\r\nfunction parseAllowed(origins: string | undefined) {\r\n  return (origins ?? \"\").split(\",\").map(s => s.trim()).filter(Boolean)\r\n}\r\n\r\nexport default {\r\n  async fetch(req: Request, env: Env, ctx: any): Promise<Response> {\r\n    const url = new URL(req.url)\r\n    const apiOrigin = (env.API_ORIGIN as string) || \"https://api.eddyb.dev\"\r\n    const allowed = new Set(parseAllowed(env.ALLOWED_ORIGINS as string))\r\n\r\n    // Only handle /api/* here; everything else should be served by Cloudflare Pages\r\n    if (!url.pathname.startsWith(\"/api/\")) {\r\n      return new Response(\"Not found\", { status: 404 })\r\n    }\r\n\r\n    // CORS preflight\r\n    if (req.method === \"OPTIONS\") {\r\n      return corsResponse(null, req, allowed)\r\n    }\r\n\r\n    // Rewrite /api/xyz -> <API_ORIGIN>/xyz\r\n    const upstream = new URL(url.toString())\r\n    upstream.hostname = new URL(apiOrigin).hostname\r\n    upstream.protocol = new URL(apiOrigin).protocol\r\n    upstream.port = new URL(apiOrigin).port\r\n    upstream.pathname = url.pathname.replace(/^\\/api/, \"\")\r\n\r\n    // Copy headers (excluding hop-by-hop)\r\n    const headers = new Headers(req.headers)\r\n    const hopByHopHeaders = [\"host\", \"cf-connecting-ip\", \"x-forwarded-host\", \"x-real-ip\"]\r\n    hopByHopHeaders.forEach(h => headers.delete(h))\r\n\r\n    // Forward the request with body & cookies\r\n    const init: RequestInit = {\r\n      method: req.method,\r\n      headers,\r\n      body: [\"GET\", \"HEAD\"].includes(req.method) ? undefined : await req.arrayBuffer(),\r\n      redirect: \"manual\",\r\n    }\r\n\r\n    let res: Response\r\n    try {\r\n      res = await fetch(upstream.toString(), init)\r\n    } catch (e) {\r\n      return corsResponse(new Response(JSON.stringify({ error: \"Upstream not reachable\" }), {\r\n        status: 502, headers: { \"content-type\": \"application/json\" }\r\n      }), req, allowed)\r\n    }\r\n\r\n    // Pass through body & headers, but apply CORS\r\n    const outHeaders = new Headers(res.headers)\r\n    // Ensure Set-Cookie passes through (don\u2019t coalesce)\r\n    const setCookies = res.headers.getSetCookie?.() ?? []\r\n    outHeaders.delete(\"set-cookie\")\r\n    const out = new Response(res.body, { status: res.status, statusText: res.statusText, headers: outHeaders })\r\n    setCookies.forEach(c => out.headers.append(\"set-cookie\", c))\r\n\r\n    return corsResponse(out, req, allowed)\r\n  }\r\n}\r\n\r\ntype Env = {\r\n  API_ORIGIN: string\r\n  ALLOWED_ORIGINS: string\r\n}\r\n\r\n// Adds CORS for allowed origins & credentials\r\nfunction corsResponse(res: Response | null, req: Request, allowed: Set<string>) {\r\n  const origin = req.headers.get(\"origin\") || \"\"\r\n  const isAllowed = allowed.has(origin)\r\n\r\n  const base = res ?? new Response(null, { status: 204 })\r\n  base.headers.set(\"vary\", \"Origin\")\r\n  if (isAllowed) {\r\n    base.headers.set(\"access-control-allow-origin\", origin)\r\n    base.headers.set(\"access-control-allow-credentials\", \"true\")\r\n    base.headers.set(\"access-control-allow-headers\", req.headers.get(\"access-control-request-headers\") ?? \"content-type,authorization\")\r\n    base.headers.set(\"access-control-allow-methods\", req.headers.get(\"access-control-request-method\") ?? \"GET,POST,PATCH,PUT,DELETE,OPTIONS\")\r\n  }\r\n  return base\r\n}\r\n", "import type { Middleware } from \"./common\";\n\nconst drainBody: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} finally {\n\t\ttry {\n\t\t\tif (request.body !== null && !request.bodyUsed) {\n\t\t\t\tconst reader = request.body.getReader();\n\t\t\t\twhile (!(await reader.read()).done) {}\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tconsole.error(\"Failed to drain the unused request body.\", e);\n\t\t}\n\t}\n};\n\nexport default drainBody;\n", "import type { Middleware } from \"./common\";\n\ninterface JsonError {\n\tmessage?: string;\n\tname?: string;\n\tstack?: string;\n\tcause?: JsonError;\n}\n\nfunction reduceError(e: any): JsonError {\n\treturn {\n\t\tname: e?.name,\n\t\tmessage: e?.message ?? String(e),\n\t\tstack: e?.stack,\n\t\tcause: e?.cause === undefined ? undefined : reduceError(e.cause),\n\t};\n}\n\n// See comment in `bundle.ts` for details on why this is needed\nconst jsonError: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} catch (e: any) {\n\t\tconst error = reduceError(e);\n\t\treturn Response.json(error, {\n\t\t\tstatus: 500,\n\t\t\theaders: { \"MF-Experimental-Error-Stack\": \"true\" },\n\t\t});\n\t}\n};\n\nexport default jsonError;\n", "\t\t\t\timport worker, * as OTHER_EXPORTS from \"C:\\\\Users\\\\rbatc\\\\Documents\\\\Projects\\\\Idea Project\\\\Idea-Manager\\\\web\\\\edge\\\\src\\\\proxy.ts\";\n\t\t\t\timport * as __MIDDLEWARE_0__ from \"C:\\\\Users\\\\rbatc\\\\AppData\\\\Roaming\\\\nvm\\\\v22.12.0\\\\node_modules\\\\wrangler\\\\templates\\\\middleware\\\\middleware-ensure-req-body-drained.ts\";\nimport * as __MIDDLEWARE_1__ from \"C:\\\\Users\\\\rbatc\\\\AppData\\\\Roaming\\\\nvm\\\\v22.12.0\\\\node_modules\\\\wrangler\\\\templates\\\\middleware\\\\middleware-miniflare3-json-error.ts\";\n\n\t\t\t\texport * from \"C:\\\\Users\\\\rbatc\\\\Documents\\\\Projects\\\\Idea Project\\\\Idea-Manager\\\\web\\\\edge\\\\src\\\\proxy.ts\";\n\t\t\t\tconst MIDDLEWARE_TEST_INJECT = \"__INJECT_FOR_TESTING_WRANGLER_MIDDLEWARE__\";\n\t\t\t\texport const __INTERNAL_WRANGLER_MIDDLEWARE__ = [\n\t\t\t\t\t\n\t\t\t\t\t__MIDDLEWARE_0__.default,__MIDDLEWARE_1__.default\n\t\t\t\t]\n\t\t\t\texport default worker;", "export type Awaitable<T> = T | Promise<T>;\n// TODO: allow dispatching more events?\nexport type Dispatcher = (\n\ttype: \"scheduled\",\n\tinit: { cron?: string }\n) => Awaitable<void>;\n\nexport type IncomingRequest = Request<\n\tunknown,\n\tIncomingRequestCfProperties<unknown>\n>;\n\nexport interface MiddlewareContext {\n\tdispatch: Dispatcher;\n\tnext(request: IncomingRequest, env: any): Awaitable<Response>;\n}\n\nexport type Middleware = (\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tmiddlewareCtx: MiddlewareContext\n) => Awaitable<Response>;\n\nconst __facade_middleware__: Middleware[] = [];\n\n// The register functions allow for the insertion of one or many middleware,\n// We register internal middleware first in the stack, but have no way of controlling\n// the order that addMiddleware is run in service workers so need an internal function.\nexport function __facade_register__(...args: (Middleware | Middleware[])[]) {\n\t__facade_middleware__.push(...args.flat());\n}\nexport function __facade_registerInternal__(\n\t...args: (Middleware | Middleware[])[]\n) {\n\t__facade_middleware__.unshift(...args.flat());\n}\n\nfunction __facade_invokeChain__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tmiddlewareChain: Middleware[]\n): Awaitable<Response> {\n\tconst [head, ...tail] = middlewareChain;\n\tconst middlewareCtx: MiddlewareContext = {\n\t\tdispatch,\n\t\tnext(newRequest, newEnv) {\n\t\t\treturn __facade_invokeChain__(newRequest, newEnv, ctx, dispatch, tail);\n\t\t},\n\t};\n\treturn head(request, env, ctx, middlewareCtx);\n}\n\nexport function __facade_invoke__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tfinalMiddleware: Middleware\n): Awaitable<Response> {\n\treturn __facade_invokeChain__(request, env, ctx, dispatch, [\n\t\t...__facade_middleware__,\n\t\tfinalMiddleware,\n\t]);\n}\n", "// This loads all middlewares exposed on the middleware object and then starts\n// the invocation chain. The big idea is that we can add these to the middleware\n// export dynamically through wrangler, or we can potentially let users directly\n// add them as a sort of \"plugin\" system.\n\nimport ENTRY, { __INTERNAL_WRANGLER_MIDDLEWARE__ } from \"C:\\\\Users\\\\rbatc\\\\Documents\\\\Projects\\\\Idea Project\\\\Idea-Manager\\\\web\\\\edge\\\\.wrangler\\\\tmp\\\\bundle-EhBDtQ\\\\middleware-insertion-facade.js\";\nimport { __facade_invoke__, __facade_register__, Dispatcher } from \"C:\\\\Users\\\\rbatc\\\\AppData\\\\Roaming\\\\nvm\\\\v22.12.0\\\\node_modules\\\\wrangler\\\\templates\\\\middleware\\\\common.ts\";\nimport type { WorkerEntrypointConstructor } from \"C:\\\\Users\\\\rbatc\\\\Documents\\\\Projects\\\\Idea Project\\\\Idea-Manager\\\\web\\\\edge\\\\.wrangler\\\\tmp\\\\bundle-EhBDtQ\\\\middleware-insertion-facade.js\";\n\n// Preserve all the exports from the worker\nexport * from \"C:\\\\Users\\\\rbatc\\\\Documents\\\\Projects\\\\Idea Project\\\\Idea-Manager\\\\web\\\\edge\\\\.wrangler\\\\tmp\\\\bundle-EhBDtQ\\\\middleware-insertion-facade.js\";\n\nclass __Facade_ScheduledController__ implements ScheduledController {\n\treadonly #noRetry: ScheduledController[\"noRetry\"];\n\n\tconstructor(\n\t\treadonly scheduledTime: number,\n\t\treadonly cron: string,\n\t\tnoRetry: ScheduledController[\"noRetry\"]\n\t) {\n\t\tthis.#noRetry = noRetry;\n\t}\n\n\tnoRetry() {\n\t\tif (!(this instanceof __Facade_ScheduledController__)) {\n\t\t\tthrow new TypeError(\"Illegal invocation\");\n\t\t}\n\t\t// Need to call native method immediately in case uncaught error thrown\n\t\tthis.#noRetry();\n\t}\n}\n\nfunction wrapExportedHandler(worker: ExportedHandler): ExportedHandler {\n\t// If we don't have any middleware defined, just return the handler as is\n\tif (\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__ === undefined ||\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__.length === 0\n\t) {\n\t\treturn worker;\n\t}\n\t// Otherwise, register all middleware once\n\tfor (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {\n\t\t__facade_register__(middleware);\n\t}\n\n\tconst fetchDispatcher: ExportedHandlerFetchHandler = function (\n\t\trequest,\n\t\tenv,\n\t\tctx\n\t) {\n\t\tif (worker.fetch === undefined) {\n\t\t\tthrow new Error(\"Handler does not export a fetch() function.\");\n\t\t}\n\t\treturn worker.fetch(request, env, ctx);\n\t};\n\n\treturn {\n\t\t...worker,\n\t\tfetch(request, env, ctx) {\n\t\t\tconst dispatcher: Dispatcher = function (type, init) {\n\t\t\t\tif (type === \"scheduled\" && worker.scheduled !== undefined) {\n\t\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\t\tDate.now(),\n\t\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t\t() => {}\n\t\t\t\t\t);\n\t\t\t\t\treturn worker.scheduled(controller, env, ctx);\n\t\t\t\t}\n\t\t\t};\n\t\t\treturn __facade_invoke__(request, env, ctx, dispatcher, fetchDispatcher);\n\t\t},\n\t};\n}\n\nfunction wrapWorkerEntrypoint(\n\tklass: WorkerEntrypointConstructor\n): WorkerEntrypointConstructor {\n\t// If we don't have any middleware defined, just return the handler as is\n\tif (\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__ === undefined ||\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__.length === 0\n\t) {\n\t\treturn klass;\n\t}\n\t// Otherwise, register all middleware once\n\tfor (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {\n\t\t__facade_register__(middleware);\n\t}\n\n\t// `extend`ing `klass` here so other RPC methods remain callable\n\treturn class extends klass {\n\t\t#fetchDispatcher: ExportedHandlerFetchHandler<Record<string, unknown>> = (\n\t\t\trequest,\n\t\t\tenv,\n\t\t\tctx\n\t\t) => {\n\t\t\tthis.env = env;\n\t\t\tthis.ctx = ctx;\n\t\t\tif (super.fetch === undefined) {\n\t\t\t\tthrow new Error(\"Entrypoint class does not define a fetch() function.\");\n\t\t\t}\n\t\t\treturn super.fetch(request);\n\t\t};\n\n\t\t#dispatcher: Dispatcher = (type, init) => {\n\t\t\tif (type === \"scheduled\" && super.scheduled !== undefined) {\n\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\tDate.now(),\n\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t() => {}\n\t\t\t\t);\n\t\t\t\treturn super.scheduled(controller);\n\t\t\t}\n\t\t};\n\n\t\tfetch(request: Request<unknown, IncomingRequestCfProperties>) {\n\t\t\treturn __facade_invoke__(\n\t\t\t\trequest,\n\t\t\t\tthis.env,\n\t\t\t\tthis.ctx,\n\t\t\t\tthis.#dispatcher,\n\t\t\t\tthis.#fetchDispatcher\n\t\t\t);\n\t\t}\n\t};\n}\n\nlet WRAPPED_ENTRY: ExportedHandler | WorkerEntrypointConstructor | undefined;\nif (typeof ENTRY === \"object\") {\n\tWRAPPED_ENTRY = wrapExportedHandler(ENTRY);\n} else if (typeof ENTRY === \"function\") {\n\tWRAPPED_ENTRY = wrapWorkerEntrypoint(ENTRY);\n}\nexport default WRAPPED_ENTRY;\n"],
  "mappings": "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",
  "names": []
}
