from starlette.middleware.trustedhost import TrustedHostMiddleware
from datetime import datetime, timezone
from contextlib import asynccontextmanager
import socket
import logging
from fastapi import FastAPI, Request
from fastapi.responses import JSONResponse
from fastapi import HTTPException
from fastapi.middleware.cors import CORSMiddleware
from app.core.logging import configure_logging
from app.api.middleware import RequestIDMiddleware, AccessLogMiddleware, request_id_ctx
from slowapi.errors import RateLimitExceeded
from slowapi import _rate_limit_exceeded_handler
from slowapi.middleware import SlowAPIMiddleware
from app.core.rate_limit import limiter

from app import __version__ as API_VERSION
from app.core.config import settings

start_time = datetime.now(timezone.utc)

def unhandled_exception_handler(request: Request, exc: Exception):
    logger = logging.getLogger("app")
    logger.error(f"Unhandled exception: {exc}", exc_info=True)
    return JSONResponse(
        status_code=500,
        content={"detail": "Internal Server Error"},
    )

def create_app() -> FastAPI:
    configure_logging()  # Set up logging early

    # control docs per env
    docs_url     = "/docs" if settings.ENABLE_DOCS else None
    redoc_url    = "/redoc" if settings.ENABLE_DOCS else None
    openapi_url  = "/openapi.json" if settings.ENABLE_DOCS else None

    # Use lifespan instead of deprecated on_event
    @asynccontextmanager
    async def lifespan(app: FastAPI):
        logger = logging.getLogger("app")
        logger.info("ðŸš€ Idea Manager API is starting up!")
        logger.info("ðŸ“‹ API Documentation: http://localhost:8000/docs")
        logger.info("ðŸ”§ Interactive API: http://localhost:8000/redoc")
        logger.info("ðŸ’¡ Main API: http://localhost:8000")
        yield

    app = FastAPI(
        title="Idea Manager",
        version=API_VERSION,
        lifespan=lifespan,
        docs_url=docs_url,
        redoc_url=redoc_url,
        openapi_url=openapi_url,
    )

    # Rate limiting: limiter state + middleware + default handler
    app.state.limiter = limiter
    app.add_exception_handler(RateLimitExceeded, _rate_limit_exceeded_handler)
    app.add_middleware(SlowAPIMiddleware)

    # Get CORS origins from settings
    dev_origins = ["http://localhost:5173", "http://localhost:3000"]
    origins = settings.cors_origins or (dev_origins if settings.APP_ENV == "dev" else [])

    app.add_middleware(
        CORSMiddleware,
        allow_origins=origins,
        allow_credentials=True,
        allow_methods=["*"],
        allow_headers=["*"],
    )

    # Trusted Host (prevents DNS-rebinding)
    hosts = (
        ["*"] if settings.APP_ENV == "dev" and not settings.allowed_hosts_list
        else (settings.allowed_hosts_list or ["api.eddyb.dev"])
    )
    app.add_middleware(TrustedHostMiddleware, allowed_hosts=hosts)

    # Minimal security headers in prod (safe behind Cloudflare)
    if settings.APP_ENV != "dev":
        @app.middleware("http")
        async def _security_headers(request, call_next):
            resp = await call_next(request)
            resp.headers.setdefault("X-Frame-Options", "DENY")
            resp.headers.setdefault("X-Content-Type-Options", "nosniff")
            resp.headers.setdefault("Referrer-Policy", "no-referrer")
            # HSTS is fine through Cloudflare (clients see it)
            resp.headers.setdefault("Strict-Transport-Security", "max-age=31536000; includeSubDomains; preload")
            return resp

    # Add middleware
    app.add_middleware(RequestIDMiddleware)
    app.add_middleware(AccessLogMiddleware)

    # Handle unexpected errors
    app.add_exception_handler(Exception, unhandled_exception_handler)
    @app.exception_handler(HTTPException)
    async def http_error_handler(request: Request, exc: HTTPException):
        # Prefer the request ID generated by middleware; fallback to header or "-"
        rid = request_id_ctx.get() or request.headers.get("X-Request-ID", "-")
        return JSONResponse(
            status_code=exc.status_code,
            content={
                "error": {"code": exc.status_code, "message": exc.detail},
                "request_id": rid
            },
            headers={"X-Request-ID": rid},
        )

    # Root info endpoint
    @app.get("/", summary="API Info", tags=["health"])
    async def root():
        uptime_seconds = (datetime.now(timezone.utc) - start_time).total_seconds()
        return {
            "name": "Idea Manager API",
            "version": API_VERSION,
            "description": "Manage and rank innovative ideas.",
            "docs_url": "/docs" if settings.ENABLE_DOCS else None,
            "redoc_url": "/redoc" if settings.ENABLE_DOCS else None,
            "uptime_seconds": uptime_seconds,
            "host": socket.gethostname(),
        }

    # Routers
    from app.api.routers.health import router as health_router
    app.include_router(health_router, prefix="/health", tags=["health"])

    from app.api.routers.ideas import router as ideas_router
    app.include_router(ideas_router, prefix="/ideas", tags=["ideas"])

    from app.api.routers.auth import router as auth_router
    app.include_router(auth_router, prefix="/auth", tags=["auth"])

    from app.api.routers.admin_users import router as admin_users_router
    app.include_router(admin_users_router, prefix="/admin/users", tags=["admin"])

    return app

app = create_app()